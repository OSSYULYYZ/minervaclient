#!/usr/bin/env python

import reg
from minerva_common import *
import config_local

import argparse,sys,json
state = {}

def parse_args():
	parser = argparse.ArgumentParser()
	parser.add_argument("-t","--term",help="The term (e.g. FALL2016, 201609, etc.) in which to register for these courses",required=True)
	parser.add_argument("-j","--job",help="A unique name used to track which CRNs remain to be registered for (for automation purposes)")
	parser.add_argument("-A","--require-all",help="Only register for courses if all of the requested courses are available. NOTE: Only allowed when course codes are given.",action="store_true")
	parser.add_argument("-R","--require-reg",help="Only register for courses if you can enter the class or the waitlist. NOTE: Only allowed when course codes are given..",action="store_true")
	parser.add_argument("-n","--no-register",help="Don't actually perform registration.",action="store_true")
	parser.add_argument("-d","--delay",help="[TODO] Introduces random delays between requests and before starting, to help you better fit in as a human.")
	parser.add_argument("-P","--public-search",help="[BUGGY] Do not log into Minerva to search !!! This option can only be used to register for the waitlist !!!",action="store_true")
	parser.add_argument("-v", "--verbose", help="[TODO] Show details about the HTTP requests sent to Minerva",action="store_true")
	parser.add_argument("-q","--quiet",help="[TODO] Only print output for successful registration",action="store_true")
	parser.add_argument('course',nargs='+',help="A series of CRNs (e.g. 814 202) or course codes (POLI-244-001 COMP-251-002), but not both.")
	args = parser.parse_args()
	
	args.term = get_term_code(args.term)
	
	if config_local.always_dry_run:
		args.no_register = True

	if args.job is None:
		args.job = False

	return args

def course_ref_type(arg):
	return arg[0].isalpha()

def save_state(job,data):
	global state
	f = open("state.dat","w")
	state[job].extend(data)
	f.write(json.dumps(state))
	f.close()

def restore_state(job,courses):
	global state
	state = json.loads(open("state.dat").read())
	if job in state:
		courses = list(set(courses) - set(state[job]))
		print courses
	else:
		state[job] = []

	return courses

def main():
	args = parse_args()
	codes_given = course_ref_type(args.course[0])
	term = args.term


		
	for course in args.course:
		if codes_given != course_ref_type(course):
			print "\033[1;31mERROR:\033[0m Course codes cannot be combined with CRNs"
			sys.exit(MinervaError.user_error)

	
	if args.job:
		courses = restore_state(args.job,args.course)
		if not courses:
			print "\033[1;32m**** Congratulations, you've gotten into all your courses ****\033[1m"
			sys.exit(0)
	else:
		courses = args.course

	if codes_given:
		data = reg.check_register(term,courses,require_all=args.require_all,require_reg=args.require_reg,dry_run=args.no_register,public_search=args.public_search)
	else:

		if args.require_all or args.require_reg:
			print "\033[1;31mERROR:\033[0m When using CRNs, it is not possible to verify the state of classes before attempting registration."
			sys.exit(MinervaError.user_error)
		elif args.public_search:
			print "\033[1;31mERROR:\033[0m This feature is implemented only when searching by course code"
			sys.exit(MinervaErrror.user_error)

		data = reg.fast_register(term,courses,dry_run=args.no_register)

	
	# If we're still here, nothing bad happened, hopefully
	if args.job:
		save_state(args.job,data)



main()


# vi: ft=python
