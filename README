# Minervac
### The Minerva Client

`minervac` is a CLI client for Minerva's course registration facilities. Currently, the program can display your current course schedule with custom reports, and can register for courses by CRN or course code. Previously registered courses are recorded and `minervac` will only attempt registration for the remaining courses on each run.
The program is implemented in Python and currently is very hacky. Pull requests welcome. If you have ideas for features or have found a bug, please open an issue.

![Registering for a course](http://i.imgur.com/9FciOtv.png)  
**[More screenshots](#screenshots)**

## Updates

1. ****
 * A visual timetable feature has been implemented. (-V).
2. ****
 * The command-line interface won't be modified anymore, only extended. Configuration format is still in flux.
 * Displaying course schedule information with custom reports.
 

## See also

* You could try seeing an advisor.
* If you don't need to make changes to your registration, use `Minervabot` instead. It is probably way better: https://github.com/zafarali/minerva-bot

## Goals

The goals of this project are to create a simple and high-quality interface for the most-used features of Minerva. The user interface will be designed in accordance with UNIX priciples, thus, `minervac` will be easily programmable. Additionally, `minervac` will clearly explain how it is connecting to Minerva and provide a starting point for other projects that attempt to use the Minerva "API". This project is free and open-source.

## Installation

1. `minervac` uses the `requests` and `beautifulsoup4` modules for Python.
	* I think it's easiest to install them with `pip`? `sudo pip install requests beautifulsoup4`
2. Copy `credentials.py` to `credentials_local.py` and fill in your credentials.
3. Edit `config.py` to setup various settings

## Usage

It's way simpler than actually using Minerva!

* **Registration:** `mnvc reg`
	* To register for a set of courses: `mnvc reg -t FALL2016 COMP-251-001 MATH-240-001`
	* To register by CRN (faster): `minervac reg -t 2016-FALL 814 30302 30`
	* To save previously-registered courses and only register for what remains: `mnvc reg -j compstuff -t 2016-FALL COMP-273-002 COMP-396-001`
	* **NOTE:** An option to search without logging in is provided. However, only waitlist information can be determined in this way, and its quality may be poor.
* **Scheduling:** `mnvc sched`
	* To display your schedule: `mnvc sched -t WINTER2017`
	* To display more details, or less: `mnvc sched -lt SUMMER-2017` or `minervac sched -st 2016WINTER-SUP`
	* To use a custom report (edit `config.py`): `mnvc sched -t WINTER2017 -r magicreport`
	* To show your timetable in HTML: `minervac sched -t 2016SUMMER -V`
	    * Edit `config.py` to change the way courses are formatted and `sched_timetable.css` to adjust the styling.
* For a full description of available options: `mnvc -h`


## Scheduling registration

* Put it in your `crontab`. This way, the `minervac` will automatically be run at the time interval you choose, and you will receive an email indicating the status of your course registration job.
	* If you don't have `cron`, you may need to write a long-running loop or use your OS' job scheduling facility. Oh, and by the way, your OS sucks.
* You may need to actually implement the `-d` option (delay) to avoid getting yourself banned from Minerva.
* An example crontab line: `00     *       *       *       *       minervac -dj compstuff -t 2016FALL 814 20620 33`
.  
* Some ideas:
	* Set the `MAILTO` option to your email address, or pipe the output to `mail`.
	* You can receive this information as a SMS text message. Look up the email-to-SMS gateway for your cellular carrier. For example, `MAILTO=2505551234@msg.telus.com`

## Further development

* Querying the unofficial transcript.
* Displaying degree evaluation reports.
* Monitoring schedules and transcripts for changes.
* **Won't implement:** While it would be trivial to support dropping courses, I am worried that this may mess up people's schedules as Minerva does not perform truly atomic transactions. Furthermore, it may mess up my own schedule and so I don't want to test it. If you're braver than I am, please send me a pull request.
* Support output formatters and more control over what this program prints.

## WARNING

1. You are solely responsible for deciding if `minervac` is compliant with McGill's policies, and if you want to assume this risk.
    * Start reading here: [McGill Policy on the Responsible Use of IT Resources](http://www.mcgill.ca/secretariat/files/secretariat/responsible-use-of-mcgill-it-policy-on-the.pdf), but there are most definitely more policies that may be applicable to this program and its use.
2. `minervac` might mess up your course schedule in a very bad sort of way.
3. `minervac` might suddenly stop working if Minerva is changed.
4. Minerva is a horrible, horrible program and may give you a serious headache if you try to extend this program.
5. This program was badly written, in a rush, and might have some serious design flaws.
6. I'm not actually a Python programmer.
7. May give CS hipsters a headache.

## Screenshots

<a href="http://i.imgur.com/J97ekip.png"><img src="http://i.imgur.com/J97ekip.png" width="80%"></a> <a href="http://i.imgur.com/SYRaUzk.png"><img src="http://i.imgur.com/SYRaUzk.png" width="80%"></a>
